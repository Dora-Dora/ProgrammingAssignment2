plot(avgs)
?plot
plot(avgs,type="p")
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n, rate = lambda)
simMatrix <- matrix(rexp(burnin+1:end),N,n) # storing data in a N*n matrix
simMatrix <- matrix(rexp((burnin+1):end),N,n) # storing data in a N*n matrix
simMatrix <- matrix(simArray(burnin+1:end),N,n) # storing data in a N*n matrix
simArray <- rexp(N*n, rate = lambda)
simMatrix <- matrix(simArray(burnin+1:end),N,n) # storing data in a N*n matrix
clear
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n, rate = lambda)
simMatrix <- matrix(simArray(burnin+1:end),N,n) # storing data in a N*n matrix
simMatrix <- matrix(simArray[burnin+1:end],N,n) # storing data in a N*n matrix
simMatrix <- matrix(simArray[(burnin+1):end],N,n) # storing data in a N*n matrix
A <- 1:5
A[end]
simArray <- rexp(N*n+burnin, rate = lambda)
simMatrix <- matrix(simArray[(burnin+1):end],N,n) # storing data in a N*n matrix
simMatrix <- matrix(simArray[(burnin+1):length(simArray)],N,n) # storing data in a N*n matrix
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(1)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n+burnin, rate = lambda)
simMatrix <- matrix(simArray[(burnin+1):length(simArray)],N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(0)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n+burnin, rate = lambda)
simMatrix <- matrix(simArray[(burnin+1):length(simArray)],N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(1)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n+burnin, rate = lambda)
simMatrix <- matrix(simArray[(burnin+1):length(simArray)],N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(0)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simArray <- rexp(N*n+burnin, rate = lambda)
simMatrix <- matrix(simArray[(burnin+1):length(simArray)],N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
burnin <- 500 # to eliminate the initial value effect from the seed
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample means of 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
# Data generation --------------------------------------------------------------
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
# Data generation --------------------------------------------------------------
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histograms -------------------------------------------------------------------
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample averages over 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
hist(avgs, main = "Histogram of Sample Averages", ylim = ymax)
# Data generation --------------------------------------------------------------
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
hist(avgs, main = "Histogram of Sample Averages", ylim = ymax)
# Table comparing sample mean and population mean ------------------------------
smean <- mean(avgs) # sample mean of the averages
svar <- var(avgs)   # sample variance of the averages
pmean <- 1/lambda   # population mean
pvar <- (1/lambda)^2/n # population standard error
disp <- matrix(c(smean,svar,pmean,pvar), nrow = 2, ncol = 2)
rownames(disp) <- c("Mean","Variance")
colnames(disp) <- c("Sample","Population")
round(disp,3) # display the table with 3 digits
# histograms -------------------------------------------------------------------
# histogram of 1000 exponential distributed random numbers
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
# histogram of 1000 sample averages over 40 exponential distributed random numbers
par(mar=c(3, 4, 2.5, 1.5))
ymax <- c(0, max(density(avgs)$y)) # to avoid curve being cut off
hist(avgs, probability = TRUE, main = "Histogram of Sample Averages", ylim = ymax)
abline(v = median(avgs),lwd = 2) # median of the sample distribution
curve(dnorm(x,mean = pmean, sd = sqrt(pvar)),ylim = ymax, col = "red", add = TRUE)
abline(v = pmean, col = "red", lwd = 2)
legend(6.4, 0.45, c("Sample mean", "Population mean"), col = c("black", "red"),
cex = 0.7, lwd = c(2,2))
set.seed(256)
N <- 1000 # number of simulations
n <- 40   # number of points in each simulation to take average
lambda <- 0.2 # "rate" parameter in the exponential distribution
simMatrix <- matrix(rexp(N*n, rate = lambda),N,n) # storing data in a N*n matrix
# Data of interest: 1000 sample averages ---------------------------------------
avgs <- rowMeans(simMatrix) # 1000 sample means each over 40 points
summary(avgs) # a basic summary of the data
hist(avgs, main = "Histogram of Sample Averages")
max(avgs)
latex_engine: xelate
?hist
hist(rexp(N), probability = TRUE, breaks = 300
main = "Histogram of Expo Dist Rand Nums")
hist(rexp(N), probability = TRUE, breaks = 300.
hist(rexp(N), probability = TRUE, breaks = 300,
main = "Histogram of Expo Dist Rand Nums")
hist(rexp(N), probability = TRUE,
main = "Histogram of Expo Dist Rand Nums")
install.packages("ToothGrowth")
data(ToothGrowth)
data(ToothGrowth)
head(ToothGrowth)
summary(ToothGrowth)
data(ToothGrowth) # loading data set
head(ToothGrowth) # get a glance of the data
?str
str(ToothGrowth)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?str
?qplot
boxplot(len~supp*dose, data=ToothGrowth, notch=TRUE,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth,
col=(c("gold","darkgreen")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth,
col=(c("yellow","green")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth,
col=(c("green","yellow")),
main="Tooth Growth", xlab="Suppliment and Dose")
boxplot(len~supp*dose, data=ToothGrowth, col=(c("pink","yellow")),
main="Tooth Growth", xlab="Suppliment and Dose")
data(ToothGrowth) # loading dataset
head(ToothGrowth) # get a glance of the dataset
str(ToothGrowth) # display the structure of the dataset
boxplot(len~supp*dose, data=ToothGrowth, col=(c("pink","yellow")),
main="ToothGrowth Boxplot", xlab="Suppliment and Dose")
OJ = ToothGrowth$len[ToothGrowth$supp == "OJ"]
VC = ToothGrowth$len[ToothGrowth$supp == "VC"]
?t.test
t.test(OJ, VC, alternative = "greater")
Half = ToothGrowth$len[ToothGrowth$dose == 0.5]
One = ToothGrowth$len[ToothGrowth$dose == 1]
Two = ToothGrowth$len[ToothGrowth$dose == 2]
t.test(Half, One, alternative = "less",
paired = FALSE, var.equal = FALSE, conf.level = 0.95)
library(swirl)
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags,class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags,class)
cls_vect <- sapply(flags,class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags,unique)
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags,unique)
lapply(unique_vals,function(elem) elem[2])
play()
?gl
c(rnorm(2),runif(3))
x <- rnorm(10)
f1 <- gl(2,5)
f2 <- gl(5,2)
split(x,c(f1,f2))
x
split(x,list(f1,f2))
f1
f2
split(x,list(f1,f2))
?split
nxt()
sapply(flags,unique)
vapply(flags,uniqu,numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
mean(iris)
str(iris)
mean(iris$Sepal.Length)
head(iris)
colMeans(iris)
rowMeans(iris,[,1:4])
rowMeans(iris,1:4])
rowMeans(iris,1:4)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
debug(ls)
ls()
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean))
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
mean(mtcars$mpg, mtcars$cyl)
split(mtcars, mtcars$cyl)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
209.21429 - 82.63636
library(datasets)
data(iris)
head(iris)
mean(iris[iris["Species"] == "virginica"]$Sepal.Length)
temp <- iris[iris["Species"] == "virginica"]
head(temp)
temp <- iris[,iris["Species"] == "virginica"]
temp <- iris["Species"] == "virginica"
temp <- iris[temp,]
mean(temp$Sepal.Length)
apply(iris[, 1:4], 2, mean)
?solve
source("cachematrix.R")
getwd()
setwd("./Dropbox/Coursera/R Programming/")
setwd("./ProgrammingAssignment2/")
source("cachematrix.R")
A <- matrix(1:4,2,2)
solve(A)
cacheSolve(A)
traceback()
makeCacheMatrix(A)
cacheSolve(A)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(c(1:5))
makeVector(c(1:5))
cachemean(c(1:5))
cachemean(makeVector(1:5))
cacheSolve(makeCacheMatrix(A))
cacheSolve(makeCacheMatrix(A))
cacheSolve(A)
cacheSolve(makeCacheMatrix(A))
A1 <- cacheSolve(makeCacheMatrix(A))
cacheSolve(A1)
A0 <- makeCacheMatrix(A)
A1 <- cacheSolve(A0)
A1
cacheSolve(A0)
